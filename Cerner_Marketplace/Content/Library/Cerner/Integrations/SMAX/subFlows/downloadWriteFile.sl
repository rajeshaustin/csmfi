namespace: Cerner.Integrations.SMAX.subFlows
operation:
  name: downloadWriteFile
  inputs:
    - smaxURL: 'https://factory-dev.cerner.com/rest/336419949/ces/attachment/600e0b90-4ad4-4416-af7c-18386746b017'
    - auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - password: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - jiraURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
  python_action:
    use_jython: false
    script: "import sys, os\nimport subprocess\n\n# do not remove the execute function \ndef install(param): \n    message = \"\"\n    result = \"\"\n    try:\n        \n        pathname = os.path.dirname(sys.argv[0])\n        message = os.path.abspath(pathname)\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message }\n    # code goes here\n# you can add additional helper methods below.\n\ninstall(\"requests\")\n\nimport requests\n# do not remove the execute function\n\ndef execute(smaxURL,auth_baseurl,user,password, jiraURL,jiraUser, jiraPassword):\n    local_filename = \"C:\\Temp\\Cerner-Logo-square.png\"\n    message = \"\"\n    result = \"\"\n    jresult = \"\"\n    \n    try:\n    # NOTE the stream=True parameter below\n    \n        basicAuthCredentials = (user, password)\n        authResp = getAuthCookie(auth_baseurl, user, password)\n        if authResp[\"result\"] == \"True\":\n            token = authResp[\"smax_auth\"]\n            \n        authHeaders = { \"TENANTID\": \"keep-alive\"}\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\n            \n        with requests.get(smaxURL, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies, stream=True) as r:\n            r.raise_for_status()\n            with open(local_filename, 'wb') as f:\n                for chunk in r.iter_content(chunk_size=8192): \n                    # If you have chunk encoded response uncomment if\n                    # and set chunk_size parameter to None.\n                    #if chunk: \n                    f.write(chunk)\n        result=\"True\"\n        message=\"file downloaded\"\n        \n        jiraURL = jiraURL+\"rest/api/2/issue/DFAPPSUP-140/attachments\"\n        uploadResp = uploadfileToJira(jiraURL,jiraUser,jiraPassword, local_filename)\n       \n        result=uploadResp[\"result\"]\n        message=uploadResp[\"message\"]\n        \n    except Exception as e:\n        message = e\n        result = \"False\"\n            \n    return {\"result\": result, \"message\": message }\n    \ndef getAuthCookie(auth_baseurl, user, password):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    try:\n        import requests\n        basicAuthCredentials = (user, password)\n        data={}\n        data['Login'] = user\n        data['Password']= password\n\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\n        token = response.text\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smax_auth\": token }\n    \ndef uploadfileToJira(url, user, password, filepath):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    try:\n        import requests\n        basicAuthCredentials = (user, password)\n        attachment = filepath.split(\"\\\\\")[-1]\n        files = {attachment:open(filepath,'rb')}\n        headers = { 'X-Atlassian-Token': 'no-check', 'Content-Type': 'image/png'}\n\n        response = requests.request(\"POST\",url, headers=headers, files=files, auth=basicAuthCredentials)\n        message = response.text\n        result = \"True\"\n        \n    except Exception as e:\n        message = e\n        result = \"False\"\n        \n    return {\"result\": result, \"message\": message }"
  outputs:
    - results
    - message
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
