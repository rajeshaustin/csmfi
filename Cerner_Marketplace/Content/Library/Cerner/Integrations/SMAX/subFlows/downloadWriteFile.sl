namespace: Cerner.Integrations.SMAX.subFlows
operation:
  name: downloadWriteFile
  inputs:
    - smaxURL: 'https://factory-dev.cerner.com/rest/336419949/ces/attachment/600e0b90-4ad4-4416-af7c-18386746b017'
    - auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - password: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - jiraURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
  python_action:
    use_jython: false
    script: "# -*- coding: latin-1 -*-\r\nimport sys, os\r\nimport subprocess\r\n\r\n# do not remove the execute function \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n    # code goes here\r\n# you can add additional helper methods below.\r\n\r\ninstall(\"requests\")\r\n\r\nimport requests\r\n# do not remove the execute function\r\n\r\ndef execute(smaxURL,auth_baseurl,user,password, jiraURL,jiraUser, jiraPassword):\r\n    local_filename = \"/tmp/Cerner-Logo-square.png\"\r\n    message = \"\"\r\n    result = \"\"\r\n    jresult = \"\"\r\n    \r\n    try:\r\n    # NOTE the stream=True parameter below\r\n    \r\n        os.environ[\"LANG\"]  = \"en_US.UTF-8\"\r\n        os.environ[\"PYTHONUTF8\"] = \"1\"\r\n        #sys.setdefaultencoding('utf-8')\r\n        basicAuthCredentials = (user, password)\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n            \r\n        authHeaders = { \"TENANTID\": \"keep-alive\", \"Content-Type\": \"text/html; charset=utf-8\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        \r\n        message = \"before calling request\"\r\n       \r\n        r = requests.get(smaxURL, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        r.encoding = 'utf-8'\r\n        message = message + r.encoding\r\n        try:\r\n            r.raise_for_status()\r\n        except requests.exceptions.HTTPError as e:\r\n            message = e\r\n                \r\n        file = open(local_filename, \"wb\", encoding=\"utf-8\")\r\n        file.write(r.content)\r\n        file.close()\r\n        #with open(local_filename, 'wb') as f:\r\n            #    for chunk in r.iter_content(chunk_size=8192): \r\n             #       # If you have chunk encoded response uncomment if\r\n             #       # and set chunk_size parameter to None.\r\n            #        #if chunk: \r\n             #       f.write(chunk)\r\n        result=\"True\"\r\n        message=\"file downloaded\"\r\n        \r\n        jiraURL = jiraURL+\"rest/api/2/issue/DFAPPSUP-140/attachments\"\r\n        uploadResp = uploadfileToJira(jiraURL,jiraUser,jiraPassword, local_filename)\r\n       \r\n        result=uploadResp[\"result\"]\r\n        message=uploadResp[\"message\"]\r\n        \r\n    except Exception as e:\r\n        message = message+\":\"+str(e)\r\n        result = \"False\"\r\n            \r\n    return {\"result\": result, \"message\": message }\r\n    \r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data={}\r\n        data['Login'] = user\r\n        data['Password']= password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.text\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token }\r\n    \r\ndef uploadfileToJira(url, user, password, filepath):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n     \r\n        basicAuthCredentials = requests.auth.HTTPBasicAuth(user,password)\r\n        attachment = filepath.split(\"/\")[-1]\r\n        files = [('file',(attachment,open(filepath,'rb'),'image/png'))]\r\n        headers = { 'X-Atlassian-Token': 'no-check'}\r\n        #  url = url +\"rest/api/2/issue/DFAPPSUP-140/attachments\"\r\n        response = requests.post(url, files=files, headers=headers, auth=basicAuthCredentials)\r\n        message = response.text\r\n        result = \"True\"\r\n        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n        \r\n    return {\"result\": result, \"message\": message }"
  outputs:
    - result
    - message
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
