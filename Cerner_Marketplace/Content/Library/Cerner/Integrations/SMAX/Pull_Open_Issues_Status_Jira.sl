namespace: Cerner.Integrations.SMAX
operation:
  name: Pull_Open_Issues_Status_Jira
  inputs:
    - MarketPlace_jiraIssueURL: "${get_sp('MarketPlace.jiraIssueURL')}"
    - MarketPlace_jiraUser: "${get_sp('MarketPlace.jiraUser')}"
    - MarketPlace_jiraPassword: "${get_sp('MarketPlace.jiraPassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password:
        sensitive: true
        default: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for sync of Jira and Smax\r\n#   Author: Pawel Bak Microfocus (pawel.bak@microsoft.com)\r\n#   Inputs:\r\n#       -  MarketPlace_jiraIssueURL\r\n#       -  MarketPlace_jiraUser\r\n#       -  MarketPlace_jiraPassword\r\n#       -  smax_auth_baseurl\r\n#       -  smax_user\r\n#       -  smax_password\r\n#       -  smax_tenantId\r\n#       -  smax_baseurl\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n# function do download external modules to python \"on-the-fly\" \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n#main function\r\ndef execute(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"False\"\r\n    smaxDataU={}\r\n    try:\r\n        import json\r\n        smaxDataU['entities'] = []        \r\n        smaxDataU['operation'] = \"UPDATE\"\r\n        \r\n        jiraResuestsResult = getJiraRequestsForStatusUpdate(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\r\n        if jiraResuestsResult[\"result\"] == \"True\":\r\n            jiraData = json.loads(jiraResuestsResult[\"entityJsonArray\"])\r\n            dataSize = len(jiraData[\"entities\"])\r\n            smaxDataU['entities'] = [{}]*dataSize\r\n            i=0\r\n            jids = \"\"\r\n            for element in jiraData[\"entities\"]:\r\n                try:\r\n                    jids += element[\"properties\"][\"JiraIssueId_c\"] + \"♪\"\r\n                except:\r\n                    jids += \"\"\r\n            if len(jids) > 0:\r\n                jids = jids[:-1]\r\n            statusJiraResult = extractJiraStatusBulk(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, jids)\r\n            if statusJiraResult[\"result\"] == \"True\":\r\n                jiraIssueStatus = statusJiraResult[\"jiraIssueStatus\"]\r\n                updateResult = updateSMAXRequestStatusBulk(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, jiraIssueStatus, jiraData[\"entities\"])\r\n                if updateResult[\"result\"] == \"True\" and len(updateResult[\"smaxData\"]) > 2:\r\n                        data = json.loads(updateResult[\"smaxData\"])\r\n                        smaxDataU = data\r\n            insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, smaxDataU)\r\n            result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\ndef getJiraRequestsForStatusUpdate(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"False\"\r\n    entityJsonArray = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        \r\n        turl = \"{0}/rest/{1}/ems/Request?layout=Id,JiraIssueId_c&filter=RequestJiraIssueStatus_c%3D'Yes'\".format(smax_baseurl, smax_tenantId)\r\n        \r\n        response = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        if response.status_code == 200:\r\n            entityJsonArray = json.dumps(json.loads(response.content))\r\n            result = \"True\"\r\n        else:\r\n            message = \"Issue getting jira data\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"entityJsonArray\": entityJsonArray}\r\n\r\n\r\ndef extractJiraStatus(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, jsonData ):\r\n    message = \"\"\r\n    result = \"False\"\r\n    jiraIssueStatus = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        jiraIssueId = jsonData[\"properties\"][\"JiraIssueId_c\"]\r\n        turl = '{0}rest/api/2/issue/{1}'.format(MarketPlace_jiraIssueURL,jiraIssueId)\r\n        \r\n        asicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser,MarketPlace_jiraPassword)\r\n        headers = { 'X-Atlassian-Token': 'no-check'}\r\n\r\n        response = requests.get(turl, auth=asicAuthCredentials, headers=headers)\r\n\r\n        if response.status_code == 200:\r\n            entityJsonArray = json.loads(response.content)\r\n            jiraIssueStatus = entityJsonArray[\"fields\"][\"status\"][\"name\"]\r\n\r\n            result = \"True\"\r\n        else:\r\n            message = \"Issue getting jira data\"\r\n\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"jiraIssueStatus\": jiraIssueStatus}\r\n\r\ndef extractJiraStatusBulk(MarketPlace_jiraIssueURL, MarketPlace_jiraUser, MarketPlace_jiraPassword, jiraIds, pageSize=45):\r\n    message = \"\"\r\n    result = \"False\"\r\n    jiraIssueStatus = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        \r\n        index = 0\r\n        ids = jiraIds.split(\"♪\")\r\n        total = len(ids)\r\n        currentPage = 0      \r\n        currentIndex = 0\r\n\r\n        while currentIndex < total:\r\n            lids = \"\"\r\n            for i in range(currentIndex,currentIndex+pageSize):\r\n                try:\r\n                    lids += ids[i] + \"♪\"\r\n                except:\r\n                    break\r\n            if len(lids) > 0:\r\n                lids = lids[:-1]\r\n            currentIndex += pageSize\r\n            turl = '{0}rest/api/2/search?jql=issuekey in {1}&fields=id,key,status'.format(MarketPlace_jiraIssueURL,convertArrayIdsToString(lids))\r\n            \r\n            asicAuthCredentials = requests.auth.HTTPBasicAuth(MarketPlace_jiraUser,MarketPlace_jiraPassword)\r\n            headers = { 'X-Atlassian-Token': 'no-check'}\r\n\r\n            response = requests.get(turl, auth=asicAuthCredentials, headers=headers)\r\n            currentPage+=1\r\n            if response.status_code == 200:\r\n                entityJsonArray = json.loads(response.content)\r\n                for entity in entityJsonArray[\"issues\"]:\r\n                    jiraIssueStatus += entity[\"id\"] + \"♫\" + entity[\"fields\"][\"status\"][\"name\"] + \"♪\" \r\n            else:\r\n                message = \"Issue getting jira data\"\r\n        \r\n        if len(jiraIssueStatus) > 0:\r\n            jiraIssueStatus = jiraIssueStatus[:-1]\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"jiraIssueStatus\": jiraIssueStatus}\r\n\r\ndef convertArrayIdsToString(ids):\r\n    ret = \"\"\r\n    idsSplit = ids.split(\"♪\")\r\n    if len(idsSplit) == 0:\r\n        ret = \"()\"\r\n    else:\r\n        ret = \"(\"\r\n        for id in idsSplit:\r\n            ret += id + \",\"\r\n        ret = ret[:-1]\r\n        ret += \")\"\r\n    return ret\r\n\r\ndef updateSMAXRequestStatus(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, jiraIssueStatus, inputJSON):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        \r\n        #'{\"entity_type\": \"Request\", \"properties\": { \"Id\": \"'+smaxRequestID+'\",  \"JiraIssueStatus_c\": \"'+jiraIssueStatus+'\"}, \"related_properties\" : { }  }'\r\n\r\n        smaxRequestID = inputJSON[\"properties\"][\"Id\"]\r\n        \r\n        data = {}\r\n        data[\"entity_type\"] = \"Request\"\r\n        data[\"properties\"] = {}\r\n        data[\"properties\"][\"Id\"] = smaxRequestID\r\n        data[\"properties\"][\"JiraIssueStatus_c\"] = jiraIssueStatus\r\n\r\n        smaxData = json.dumps(data)\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData }\r\n\r\ndef updateSMAXRequestStatusBulk(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, jiraIssueStatus, inputJSON):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    try:\r\n        import json\r\n        import requests\r\n        smaxDataU={}\r\n        smaxDataU['entities'] = []        \r\n        smaxDataU['operation'] = \"UPDATE\"\r\n        \r\n        #'{\"entity_type\": \"Request\", \"properties\": { \"Id\": \"'+smaxRequestID+'\",  \"JiraIssueStatus_c\": \"'+jiraIssueStatus+'\"}, \"related_properties\" : { }  }'\r\n        if len(jiraIssueStatus.split(\"♪\")) > 0:\r\n            smaxDataU['entities'] = [0]*len(jiraIssueStatus.split(\"♪\"))\r\n            i = 0\r\n            for issues in jiraIssueStatus.split(\"♪\"):\r\n                for entity in inputJSON:\r\n                    if entity[\"properties\"][\"JiraIssueId_c\"] == issues.split(\"♫\")[0]:\r\n                        smaxDataU['entities'][i] = {}\r\n                        smaxDataU['entities'][i][\"entity_type\"] = \"Request\"\r\n                        smaxDataU['entities'][i][\"properties\"] = {}\r\n                        smaxDataU['entities'][i][\"properties\"][\"Id\"] = entity[\"properties\"][\"Id\"]\r\n                        smaxDataU['entities'][i][\"properties\"][\"JiraIssueStatus_c\"] = issues.split(\"♫\")[1]\r\n                        i+=1\r\n            smaxData = json.dumps(smaxDataU)\r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData }\r\n\r\n# insert or update Knowladge Article in SMAX\r\ndef insertArticles(auth_baseurl, user, password, tenantId, smax_baseurl, datas):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n\r\n\r\n        data = datas             \r\n                \r\n        response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=data, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        message = response.text\r\n        if response.status_code == 200:\r\n            token = \"Records Created!\"\r\n        else:\r\n            token = \"Issue Creating Records!\"\r\n                \r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_response\": token }\r\n\r\n\r\n\r\n#authenticate in SMAX\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data={}\r\n        data['Login'] = user\r\n        data['Password']= password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token }\r\n\r\ndef removeIdFromList(list, id):\r\n    newlist = \"\"\r\n    if len(id) == 0:\r\n        return list\r\n    if len(list) > 0:\r\n        elems = list.split(\"♪\")\r\n        for elem in elems:\r\n            if elem != id:\r\n                newlist += elem + \"♪\"\r\n        if len(newlist) > 0:\r\n            newlist = newlist[:-1]\r\n        return newlist\r\n    else:\r\n        return \"\""
  outputs:
    - result
    - message
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
