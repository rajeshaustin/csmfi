namespace: Cerner.Integrations.CernerStatusDashboard
operation:
  name: Get_CSD_Events_Upload_to_KM
  inputs:
    - csd_authtoken: "${get_sp('MarketPlace.CSDAuthToken')}"
    - csd_host: "${get_sp('MarketPlace.CSDHost')}"
    - csd_port: "${get_sp('MarketPlace.CSDPort')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
  python_action:
    use_jython: false
    script: "###############################################################\n#   OO operation for synchronizing CSD Events and Smax\n#   Author: Pawel Bak Microfocus (pawel.bak@microsoft.com)\n#   Inputs:\n#       - csd_authtoken\n#       - csd_host\n#       - csd_port\n#       - smax_auth_baseurl\n#       - smax_user\n#       - smax_password\n#       - smax_tenantId\n#       - smax_baseurl\n#       - smax_service\n#   Outputs:\n#       - result\n#       - message\n#       - jresult\n###############################################################\nimport sys, os\nimport subprocess\n\n# function do download external modules to python \"on-the-fly\" \ndef install(param): \n    message = \"\"\n    result = \"\"\n    try:\n        \n        pathname = os.path.dirname(sys.argv[0])\n        message = os.path.abspath(pathname)\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message }\n\n# requirement external modules\ninstall(\"requests\")\n\n#main function\ndef execute(csd_authtoken, csd_host, csd_port, smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\n    message = \"\"\n    result = \"\"\n    past_days = \"90\"\n    \n    try:      \n        import json\n        smaxData={}\n        smaxData['entities'] = []\n        smaxData['operation'] = \"CREATE\"\n        \n        jirar = getJiraAppInstances(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\n        if jirar[\"result\"] == \"True\":\n            jiraData = json.loads(jirar[\"jiraData\"])\n            for jelem in jiraData[\"entities\"]:\n                jira_servID = smax_servID = \"\"\n                try:\n                    jira_servID = jelem[\"properties\"][\"DisplayLabel\"]\n                    smax_servID = jelem[\"properties\"][\"ServiceDefId_c\"]\n                except:\n                    jira_servID = smax_servID = \"\"\n                if jira_servID != \"\" and smax_servID != \"\":\n                    eventsres = getEvents(csd_host, csd_port, csd_authtoken, jira_servID, past_days)\n                    if eventsres[\"result\"] == \"True\":\n                        smaxConversion = convertJiraToSmaxEvents(eventsres[\"events\"], jira_servID, smax_servID)\n                        if smaxConversion[\"result\"] == \"True\" and len(smaxConversion[\"smaxData\"]) > 2:\n                            smaxData['entities'] += json.loads(smaxConversion[\"smaxData\"])\n                            result = \"True\"\n        else:\n            result = \"False\"\n            message = jirar[\"message\"]\n        if result == \"True\":\n            roer = RemoveOldEvents(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\n            insertRes = insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, json.dumps(smaxData))\n            result = insertRes[\"result\"]\n            message = insertRes[\"message\"]\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message }\n\ndef convertJiraToSmaxEvents(events, csdService, serviceId):\n    message = \"\"\n    result = \"\"\n    smaxData = \"\"\n    try:\n        import json\n        import datetime\n        eventsData = json.loads(events)\n        smaxData = [0]*len(eventsData)\n\n        i=0\n        for event in eventsData:\n            date = datetime.datetime.fromisoformat(event[\"displayStartedAt\"])\n            timestampStartAt = int(date.replace(tzinfo=datetime.timezone.utc).timestamp())\n            startedAt = datetime.datetime.utcfromtimestamp(timestampStartAt).isoformat()\n            date = datetime.datetime.fromisoformat(event[\"displayEndedAt\"])\n            timestampEndAt = int(date.replace(tzinfo=datetime.timezone.utc).timestamp()) + 604800\n            endedAt = datetime.datetime.utcfromtimestamp(timestampEndAt).isoformat()\n\n            article = {}\n            article[\"entity_type\"] = \"Article\"\n            article[\"properties\"] = {}\n            article[\"properties\"][\"Title\"] = \"Event: {0}\".format(event[\"name\"])\n            article[\"properties\"][\"ExternalId\"] = \"{0}\".format(event[\"id\"])\n            article[\"properties\"][\"Content\"] = \"<p>Service Impacted: {0} </p> <p>Description: {1} </p> <p> Follow the link for details: <a href=\\\"https://status.cernerops.com/events/{2}\\\">here</a><br><br>\".format(csdService,event[\"description\"], event[\"id\"], )\n            article[\"properties\"][\"Description\"] = \"<p>Service Impacted: {0} </p> <p>Description: {1} </p> <p> Follow the link for details: <a href=\\\"https://status.cernerops.com/events/{2}\\\">here</a><br><br>\".format(csdService,event[\"description\"], event[\"id\"], )\n            article[\"properties\"][\"Service\"] = serviceId\n            article[\"properties\"][\"Priority\"] = \"Normal\"\n            article[\"properties\"][\"Subtype\"] = \"News\"\n            article[\"properties\"][\"PhaseId\"] = \"External\"\n            article[\"properties\"][\"SourceSystem_c\"] = \"CSD-Event\"\n            article[\"properties\"][\"DisplayStart\"] = str(timestampStartAt)\n            article[\"properties\"][\"DisplayNewsEnd\"] = str(timestampEndAt)\n            article[\"properties\"][\"EffectiveFrom\"] = str(timestampStartAt)\n            article[\"properties\"][\"EffectiveTo\"] = str(timestampEndAt)\n            smaxData[i]=article\n            i+=1\n\n        smaxData = json.dumps(smaxData)\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData }\n\ndef getJiraAppInstances(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\n    message = \"\"\n    result = \"\"\n    jiraData = \"\"\n    try:\n        import requests\n        import json\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\n        if authResp[\"result\"] == \"True\":\n            token = authResp[\"smax_auth\"]\n        else:\n            message = authResp[\"message\"]\n        \n        basicAuthCredentials = (smax_user, smax_password)\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\n        \n        turl = smax_baseurl +\"/rest/\"+smax_tenantId+\"/ems/ServiceComponent?layout=Id,DisplayLabel,ServiceDefId_c&filter=AssetTag%3D'Jira'\"\n        \n        response = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n        if response.status_code == 200:\n            jiraData = json.dumps(json.loads(response.content))\n            result = \"True\"\n        else:\n            message = \"Failed to download Jira: \" + str(response.status_code) + \": \" + token\n            result = \"False\"    \n    except Exception as e:\n        message += str(e)\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"jiraData\": jiraData }\n\ndef getEvents(csdHost, csdPort, csdAuthToken, csdService, past_days):\n    message = \"\"\n    result = \"\"\n    events = \"\"\n    serviceID = \"\"\n\n    #https://${MarketPlace/CSDHost}:${MarketPlace/CSDPort}/api/services?q=${csdService}\n    #headers = constant: Authorization: Bearer ${MarketPlace/CSDAuthToken}->Value: Authorization: Bearer ${MarketPlace/CSDAuthToken}\n    #https://${MarketPlace/CSDHost}:${MarketPlace/CSDPort}/api/events?service_id=${serviceID}&display_started_at=2021-06-10T00:00:00.000Z&display_ended_at=2021-07-10T00:00:00.000Z\n    \n    try:\n        import requests\n        import json\n        authHeaders = { \"Authorization\": \"Bearer \"+csdAuthToken}\n        turl = \"https://{0}:{1}/api/services?q={2}\".format(csdHost,csdPort,csdService)\n        responseSrv = requests.get(turl, headers=authHeaders)\n        if responseSrv.status_code == 200:\n            jr = json.loads(responseSrv.content)\n            \n            try:\n                serviceID = jr[0][\"id\"]\n            except:\n                serviceID = \"\"\n\n            dater = getLastNDays(int(past_days))\n\n            if serviceID != \"\":\n                turl1 = \"https://{0}:{1}/api/events?service_id={2}&display_started_at={3}T00:00:00.000Z&display_ended_at={4}T00:00:00.000Z\".format(csdHost,csdPort,serviceID, dater[\"startDate\"], dater[\"endDate\"])\n                responseEvnt = requests.get(turl1, headers=authHeaders)\n                if responseEvnt.status_code == 200:\n                    events = responseEvnt.text\n                    result = \"True\"\n                else:\n                    message = \"Error getting Events\"\n                    result = \"False\"\n            else:\n                message = \"Service Not Found\"\n                result = \"False\"\n        else:\n            message = \"Error getting serivecID\"\n            result = \"False\"\n        \n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"events\": events, \"serviceID\":serviceID }\n\ndef getLastNDays(N):\n    message = \"\"\n    result = \"\"\n    startDate = \"\"\n    endDate = \"\"\n\n    try:\n        from datetime import datetime, timedelta\n        d = datetime.now()\n        date_N_days_ago = d - timedelta(days=N)\n        startDate = datetime.strftime(date_N_days_ago, \"%Y-%m-%d\")\n        endDate = datetime.strftime(d, \"%Y-%m-%d\") \n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"startDate\": startDate, \"endDate\": endDate }\n\n\n#authenticate in SMAX\ndef getAuthCookie(auth_baseurl, user, password):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    asciitoken = \"\"\n    try:\n        import requests\n        import binascii\n        basicAuthCredentials = (user, password)\n        data={}\n        data['Login'] = user\n        data['Password']= password\n\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\n        token = response.content.decode('ascii')\n        \n        #asciidata=token.encode('utf-8').decode('ascii')\n        \n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": str(message),  \"smax_auth\": token }\n\n#Content hash function\ndef createHash(inputString):\n    message = \"\"\n    result = \"\"\n    hash_object = \"\"\n    try:\n        import hashlib\n        # Assumes the default UTF-8\n        hash_object = hashlib.md5(inputString.encode()).hexdigest()\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"hash_object\":hash_object}\n\n#search function for Confluence\ndef FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl, SourceSystem=\"CSD-Event\"):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    smax_ids = \"\"\n    try:\n        import requests\n        import json\n        basicAuthCredentials = (user, password)\n\n        authResp = getAuthCookie(auth_baseurl, user, password)\n        if authResp[\"result\"] == \"True\":\n            token = authResp[\"smax_auth\"]\n        \n        authHeaders = { \"TENANTID\": \"keep-alive\"}\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\n        turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/Article?layout=Id,SourceSystem_c,Title,PhaseId&filter=SourceSystem_c%3D'\"+SourceSystem+\"'\"\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n        \n        result = \"False\"\n        if response3.status_code == 200:\n            jdata = json.loads(response3.text)\n            \n            for entity in jdata['entities']:\n            \n                smax_ids += entity[\"properties\"][\"Id\"] + \"♪\"\n            \n            if len(smax_ids) > 0:\n                smax_ids = smax_ids[:-1]\n            result = \"True\"\n        \n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smax_ids\":smax_ids }\n\ndef RemoveOldEvents(auth_baseurl, user, password, tenantId, smax_baseurl):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    smax_ids = \"\"\n    try:\n        import requests\n        import json\n        \n        \n        foldRes = FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl)\n\n        if foldRes[\"result\"] == \"True\" and len(foldRes[\"smax_ids\"]) > 0:\n            \n            basicAuthCredentials = (user, password)\n            authResp = getAuthCookie(auth_baseurl, user, password)\n            if authResp[\"result\"] == \"True\":\n                token = authResp[\"smax_auth\"]\n        \n            authHeaders = { \"TENANTID\": \"keep-alive\"}\n            cookies = {\"SMAX_AUTH_TOKEN\":token}\n\n            oldIDs = foldRes[\"smax_ids\"].split(\"♪\")\n            \n            i=0\n            smaxData={}\n            smaxData[\"entities\"] = [0]*len(oldIDs)\n            smaxData[\"operation\"] = \"DELETE\"\n\n            for id in oldIDs:\n                smaxData[\"entities\"][i]={}\n                smaxData[\"entities\"][i][\"entity_type\"] = \"Article\"\n                smaxData[\"entities\"][i][\"properties\"] = {}\n                smaxData[\"entities\"][i][\"properties\"][\"Id\"] = id\n                i+=1\n\n\n            response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=smaxData, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n            \n            if response.status_code == 200:\n                result = \"True\"\n                message = \"OK\"\n            else:\n                result = \"False\"\n                message = response.text\n        \n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message }\n\n# insert or update Knowladge Article in SMAX\ndef insertArticles(auth_baseurl, user, password, tenantId, smax_baseurl, datas):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n\n    try:\n        import requests\n        import json\n        \n        basicAuthCredentials = (user, password)\n        authResp = getAuthCookie(auth_baseurl, user, password)\n        if authResp[\"result\"] == \"True\":\n            token = authResp[\"smax_auth\"]\n        \n        authHeaders = { \"TENANTID\": \"keep-alive\"}\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\n\n\n        data = json.loads(datas)             \n                \n        response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=data, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n        message = response.text\n        if response.status_code == 200:\n            token = \"Records Created!\"\n        else:\n            token = \"Issue Creating Records!\"\n                \n\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smax_response\": token }"
  outputs:
    - result
    - message
    - jresult
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
