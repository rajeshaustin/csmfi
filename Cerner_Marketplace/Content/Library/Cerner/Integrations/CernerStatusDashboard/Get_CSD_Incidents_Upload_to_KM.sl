namespace: Cerner.Integrations.CernerStatusDashboard
operation:
  name: Get_CSD_Incidents_Upload_to_KM
  inputs:
    - csd_authtoken: "${get_sp('MarketPlace.CSDAuthToken')}"
    - csd_host: "${get_sp('MarketPlace.CSDHost')}"
    - csd_port: "${get_sp('MarketPlace.CSDPort')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
  python_action:
    use_jython: false
    script: "###############################################################\r\n#   OO operation for synchronizing CSD Incidents and Smax\r\n#   Author: Pawel Bak Microfocus (pawel.bak@microsoft.com)\r\n#   Inputs:\r\n#       - csd_authtoken\r\n#       - csd_host\r\n#       - csd_port\r\n#       - smax_auth_baseurl\r\n#       - smax_user\r\n#       - smax_password\r\n#       - smax_tenantId\r\n#       - smax_baseurl\r\n#       - smax_service\r\n#       - past_days\r\n#   Outputs:\r\n#       - result\r\n#       - message\r\n#       - jresult\r\n###############################################################\r\nimport sys, os\r\nimport subprocess\r\n\r\n# function do download external modules to python \"on-the-fly\" \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n\r\n# requirement external modules\r\ninstall(\"requests\")\r\n\r\n#main function\r\ndef execute(csd_authtoken, csd_host, csd_port, smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"\"\r\n    past_days = \"90\"\r\n    \r\n    try:\r\n        import json\r\n        smaxData={}\r\n        smaxData['entities'] = []\r\n        smaxData['operation'] = \"CREATE\"\r\n        \r\n        \r\n\r\n        jirar = getJiraAppInstances(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\r\n        if jirar[\"result\"] == \"True\":\r\n            jiraData = json.loads(jirar[\"jiraData\"])\r\n            for jelem in jiraData[\"entities\"]:\r\n                jira_servID = smax_servID = \"\"\r\n                try:\r\n                    jira_servID = jelem[\"properties\"][\"DisplayLabel\"]\r\n                    smax_servID = jelem[\"properties\"][\"ServiceDefId_c\"]\r\n                except:\r\n                    jira_servID = smax_servID = \"\"\r\n                if jira_servID != \"\" and smax_servID != \"\":\r\n                    incidentsres = getIncidents(csd_host, csd_port, csd_authtoken, jira_servID, past_days)\r\n                    if incidentsres[\"result\"] == \"True\":\r\n                        smaxConversion = convertJiraToSmaxIncident(incidentsres[\"incidents\"], jira_servID, smax_servID)\r\n                        if smaxConversion[\"result\"] == \"True\" and len(smaxConversion[\"smaxData\"]) > 2:\r\n                            smaxData['entities'] += json.loads(smaxConversion[\"smaxData\"])\r\n                            result = \"True\"\r\n\r\n        if result == \"True\":\r\n            roer = RemoveOldIncidents(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\r\n            insertRes = insertArticles(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, json.dumps(smaxData))\r\n            result = insertRes[\"result\"]\r\n            message = insertRes[\"message\"]\r\n\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message}\r\n\r\n#convert from jira json to smax json\r\ndef convertJiraToSmaxIncident(incidents, csdService, serviceId):\r\n    message = \"\"\r\n    result = \"\"\r\n    smaxData = \"\"\r\n    try:\r\n        import json\r\n        import datetime\r\n        incidentsData = json.loads(incidents)\r\n        smaxData = [0]*len(incidentsData)\r\n\r\n        i=0\r\n        for incident in incidentsData:\r\n            try:\r\n                date = datetime.datetime.fromisoformat(incident[\"startedAt\"])\r\n            except:\r\n                date = datetime.datetime.now()\r\n            timestampStartAt = int(date.replace(tzinfo=datetime.timezone.utc).timestamp())\r\n            timestampStartAtStr = datetime.datetime.utcfromtimestamp(timestampStartAt).isoformat()\r\n\r\n            article = {}\r\n            article[\"entity_type\"] = \"Article\"\r\n            article[\"properties\"] = {}\r\n            article[\"properties\"][\"Title\"] = \"Incident: {0}\".format(incident[\"name\"])\r\n            article[\"properties\"][\"ExternalId\"] = \"{0}\".format(incident[\"id\"])\r\n            article[\"properties\"][\"Content\"] = \"<p>Service Impacted: {0} </p> <p>Started At: {1} </p> <p>Follow the link for details: <a href=\\\"https://status.cernerops.com/incidents/{2}\\\">here</a><br><br>\".format(csdService,timestampStartAtStr, incident[\"id\"] )\r\n            article[\"properties\"][\"Description\"] = \"<p>Service Impacted: {0} </p> <p>Started At: {1} </p> <p>Follow the link for details: <a href=\\\"https://status.cernerops.com/incidents/{2}\\\">here</a><br><br>\".format(csdService,timestampStartAtStr, incident[\"id\"] )\r\n            article[\"properties\"][\"Service\"] = serviceId\r\n            article[\"properties\"][\"Priority\"] = \"Normal\"\r\n            article[\"properties\"][\"Subtype\"] = \"News\"\r\n            article[\"properties\"][\"PhaseId\"] = \"External\"\r\n            article[\"properties\"][\"SourceSystem_c\"] = \"CSD-Incident\"\r\n            article[\"properties\"][\"EffectiveFrom\"] = str(timestampStartAt)\r\n            smaxData[i]=article\r\n            i+=1\r\n\r\n        smaxData = json.dumps(smaxData)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smaxData\": smaxData }\r\n\r\n#get data about jira instance\r\ndef getJiraAppInstances(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"\"\r\n    jiraData = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        authResp = getAuthCookie(smax_auth_baseurl, smax_user, smax_password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        basicAuthCredentials = (smax_user, smax_password)\r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        \r\n        turl = smax_baseurl +\"/rest/\"+smax_tenantId+\"/ems/ServiceComponent?layout=Id,DisplayLabel,ServiceDefId_c&filter=AssetTag%3D'Jira'\"\r\n        \r\n        response = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        if response.status_code == 200:\r\n            jiraData = json.dumps(json.loads(response.content))\r\n            result = \"True\"\r\n        else:\r\n            message = \"Failed to download Jira\"\r\n            result = \"True\"    \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"jiraData\": jiraData }\r\n\r\n#get all incidents from jira for \"past_days\"\r\ndef getIncidents(csdHost, csdPort, csdAuthToken, csdService, past_days):\r\n    message = \"\"\r\n    result = \"\"\r\n    incidents = \"\"\r\n    #https://${MarketPlace/CSDHost}:${MarketPlace/CSDPort}/api/services?q=${csdService}\r\n    #headers = constant: Authorization: Bearer ${MarketPlace/CSDAuthToken}->Value: Authorization: Bearer ${MarketPlace/CSDAuthToken}\r\n    #https://${MarketPlace/CSDHost}:${MarketPlace/CSDPort}/api/incidents?service_id=${serviceID}&unresolved=true&page=1\r\n    \r\n    try:\r\n        import requests\r\n        import json\r\n        authHeaders = { \"Authorization\": \"Bearer \"+csdAuthToken}\r\n        turl = \"https://{0}:{1}/api/services?q={2}\".format(csdHost,csdPort,csdService)\r\n        responseSrv = requests.get(turl, headers=authHeaders)\r\n        if responseSrv.status_code == 200:\r\n            jr = json.loads(responseSrv.content)\r\n            \r\n            try:\r\n                serviceID = jr[0][\"id\"]\r\n            except:\r\n                serviceID = \"\"\r\n\r\n            dater = getLastNDays(int(past_days))\r\n\r\n            if serviceID != \"\":\r\n                turl1 = \"https://{0}:{1}/api/incidents?service_id={2}&unresolved=true&page=1\".format(csdHost,csdPort,serviceID)\r\n                responseEvnt = requests.get(turl1, headers=authHeaders)\r\n                if responseEvnt.status_code == 200:\r\n                    incidents = responseEvnt.content\r\n                    result = \"True\"\r\n                else:\r\n                    message = \"Error getting Incidents\"\r\n                    result = \"False\"\r\n            else:\r\n                message = \"Service Not Found\"\r\n                result = \"False\"\r\n        else:\r\n            message = \"Error getting serivecID\"\r\n            result = \"False\"\r\n        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"incidents\": incidents }\r\n\r\n#generate start and end time for last N days\r\ndef getLastNDays(N):\r\n    message = \"\"\r\n    result = \"\"\r\n    startDate = \"\"\r\n    endDate = \"\"\r\n\r\n    try:\r\n        from datetime import datetime, timedelta\r\n        d = datetime.now()\r\n        date_N_days_ago = d - timedelta(days=N)\r\n        startDate = datetime.strftime(date_N_days_ago, \"%Y-%m-%d\")\r\n        endDate = datetime.strftime(d, \"%Y-%m-%d\") \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"startDate\": startDate, \"endDate\": endDate }\r\n\r\n#authenticate in SMAX\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data={}\r\n        data['Login'] = user\r\n        data['Password']= password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.content.decode('ascii')\r\n        #token = response.text\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token }\r\n\r\n\r\n#Content hash function\r\ndef createHash(inputString):\r\n    message = \"\"\r\n    result = \"\"\r\n    hash_object = \"\"\r\n    try:\r\n        import hashlib\r\n        # Assumes the default UTF-8\r\n        hash_object = hashlib.md5(inputString.encode()).hexdigest()\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"hash_object\":hash_object}\r\n\r\n\r\n\r\n#search function for articles of certain type\r\ndef FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl, SourceSystem=\"CSD-Incident\"):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/Article?layout=Id,SourceSystem_c,Title,PhaseId&filter=SourceSystem_c%3D'\"+SourceSystem+\"'\"\r\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        \r\n        result = \"False\"\r\n        if response3.status_code == 200:\r\n            jdata = json.loads(response3.text)\r\n            \r\n            for entity in jdata['entities']:\r\n            \r\n                smax_ids += entity[\"properties\"][\"Id\"] + \"♪\"\r\n            \r\n            if len(smax_ids) > 0:\r\n                smax_ids = smax_ids[:-1]\r\n            result = \"True\"\r\n        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_ids\":smax_ids }\r\n\r\n#remove all incidents from samx\r\ndef RemoveOldIncidents(auth_baseurl, user, password, tenantId, smax_baseurl):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_ids = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        \r\n        \r\n        foldRes = FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl)\r\n        \r\n        if foldRes[\"result\"] == \"True\" and len(foldRes[\"smax_ids\"]) > 0:\r\n            \r\n            basicAuthCredentials = (user, password)\r\n            authResp = getAuthCookie(auth_baseurl, user, password)\r\n            if authResp[\"result\"] == \"True\":\r\n                token = authResp[\"smax_auth\"]\r\n        \r\n            authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n            cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n\r\n            oldIDs = foldRes[\"smax_ids\"].split(\"♪\")\r\n            \r\n            i=0\r\n            smaxData={}\r\n            smaxData[\"entities\"] = [0]*len(oldIDs)\r\n            smaxData[\"operation\"] = \"DELETE\"\r\n\r\n            for id in oldIDs:\r\n                smaxData[\"entities\"][i]={}\r\n                smaxData[\"entities\"][i][\"entity_type\"] = \"Article\"\r\n                smaxData[\"entities\"][i][\"properties\"] = {}\r\n                smaxData[\"entities\"][i][\"properties\"][\"Id\"] = id\r\n                i+=1\r\n\r\n\r\n            response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=smaxData, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n            \r\n            if response.status_code == 200:\r\n                result = \"True\"\r\n                message = \"OK\"\r\n            else:\r\n                result = \"False\"\r\n                message = response.text\r\n        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n\r\n# insert Knowladge Article in SMAX\r\ndef insertArticles(auth_baseurl, user, password, tenantId, smax_baseurl, datas):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        \r\n        basicAuthCredentials = (user, password)\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n\r\n\r\n        data = json.loads(datas)             \r\n                \r\n        response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=data, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        message = response.text\r\n        if response.status_code == 200:\r\n            token = \"Records Created!\"\r\n        else:\r\n            token = \"Issue Creating Records!\"\r\n                \r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_response\": token }"
  outputs:
    - result
    - message
    - jresult
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
