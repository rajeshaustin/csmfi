namespace: Cerner.Integrations.ConfluenceWiki
operation:
  name: ExtractWikiContentXLoadSMAX
  inputs:
    - conf_tag: "${get_sp('MarketPlace.confluenceTag')}"
    - conf_baseurl: "${get_sp('MarketPlace.confluenceURL')}"
    - conf_user: "${get_sp('MarketPlace.confluenceUser')}"
    - conf_password: "${get_sp('MarketPlace.confluencePassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - smax_service: '12904'
  python_action:
    use_jython: false
    script: "import sys, os\r\nimport subprocess\r\n\r\n# do not remove the execute function \r\ndef install(param): \r\n    message = \"\"\r\n    result = \"\"\r\n    try:\r\n        \r\n        pathname = os.path.dirname(sys.argv[0])\r\n        message = os.path.abspath(pathname)\r\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\r\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message }\r\n    # code goes here\r\n# you can add additional helper methods below.\r\n\r\ninstall(\"requests\")\r\n\r\n\r\ndef execute(conf_tag, conf_baseurl, conf_user, conf_password, smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, smax_service):\r\n    message = \"\"\r\n    result = \"\"\r\n    jresult = \"\"\r\n    \r\n    try:\r\n        \r\n        \r\n        import requests\r\n        import json\r\n        \r\n        basicAuthCredentials = (conf_user, conf_password)\r\n        giRes = getIds(conf_tag, conf_baseurl, conf_user, conf_password)\r\n        \r\n        if giRes[\"result\"] == \"True\":\r\n            result = \"True\"\r\n            ids = giRes[\"ids\"].split(\"♪\")\r\n            tresult = json.loads('{}')\r\n            \r\n            i=0\r\n            \r\n            for idv in ids:\r\n                if len(idv) > 0:\r\n                    content =  getBodyForId(idv, conf_baseurl, conf_user, conf_password, \"True\")\r\n                    jresult += idv + \":\"\r\n                    if content[\"result\"] == \"True\":\r\n                        response = insertUpdateArticle(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, content[\"title\"], content[\"body\"], smax_service, \"Content From Confluence\", idv)\r\n                        if response[\"result\"] == \"True\":\r\n                            jresult += \"TRUE;\"\r\n                        else:\r\n                            jresult += \"FALSE_2;\"\r\n                    else:\r\n                        jresult += \"FALSE_1;\"\r\n                    \r\n        else:\r\n            message = \"Could not connect to Confluence \"+giRes[\"message\"]\r\n            result = \"False\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"jresult\": str(jresult) }\r\n\r\ndef getIds(tag, baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    ids = \"\"\r\n    \r\n    try:\r\n        import requests\r\n        import json\r\n        \r\n        basicAuthCredentials = (user, password)\r\n\r\n        response = requests.get(baseurl + '/rest/api/search/?expand=metadata.labels&cql=label='+tag, auth=basicAuthCredentials)\r\n        if response.status_code == 200:\r\n            jr = json.loads(response.content)\r\n            message = jr\r\n            results = jr[\"results\"]\r\n            message = results\r\n            pages = \"\"\r\n            try:\r\n                for content in results:\r\n                    if content[\"content\"][\"type\"] == \"page\":\r\n                        pages += content[\"content\"][\"id\"] + \"♪\"\r\n            except Exception as e:\r\n                ids = \"\"\r\n            ids = pages\r\n        \r\n            result = \"True\"\r\n        else:\r\n            result = \"False\"\r\n            message = \"Response \"+response.text\r\n        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"ids\": ids }\r\n\r\ndef getBodyForId(contentID, baseurl, user, password, replaceRelative):\r\n    message = \"\"\r\n    result = \"\"\r\n    body = \"\"\r\n    title = \"\"\r\n    status = \"\"\r\n    content_type = \"\"\r\n    \r\n    try:\r\n        import requests\r\n        import json\r\n        \r\n        basicAuthCredentials = (user, password)\r\n\r\n        response = requests.get(baseurl + '/rest/api/content/'+contentID+'?expand=body.view', auth=basicAuthCredentials)\r\n        jr = json.loads(response.content)\r\n        \r\n        message = jr\r\n        status = jr[\"status\"]\r\n        content_type = jr[\"type\"]\r\n        \r\n        try:\r\n            title = jr[\"title\"]\r\n        except Exception as e:\r\n            title = \"NO_TITLE\"\r\n        \r\n        try:\r\n            body = jr[\"body\"][\"view\"][\"value\"]\r\n            if replaceRelative == \"True\":\r\n                body = body.replace(\"\\\"/\", \"\\\"\"+baseurl+\"/\")\r\n        except Exception as e:\r\n            body = \"NO_BODY\"\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"body\": body, \"title\": title, \"status\": status, \"content_type\": content_type }\r\n\r\n\r\n\r\ndef insertUpdateArticle(auth_baseurl, user, password, tenantId, smax_baseurl, title, concont, service, description, cid):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n\r\n    try:\r\n        import requests\r\n        import json\r\n        \r\n        basicAuthCredentials = (user, password)\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n\r\n        oldRecord = FindArticleForConfluenceID(auth_baseurl, user, password, tenantId, smax_baseurl, cid)\r\n\r\n        data = generateJson(title, concont, service, description, cid)                 \r\n        \r\n        token = \"\"\r\n        \r\n        if oldRecord[\"result\"] == \"True\":\r\n            if data['entities'][0][\"properties\"][\"ConfluenceArticleHash_c\"] != oldRecord[\"conf_hash\"]:\r\n                data['entities'][0][\"properties\"][\"Id\"] = oldRecord[\"smax_id\"]\r\n                data['operation'] = \"UPDATE\"\r\n                response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=data, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n                message = response.text\r\n                if response.status_code == 200:\r\n                    token = \"Record (ID:\"+data['entities'][0][\"properties\"][\"Id\"]+\") UPDATED\"\r\n                else:\r\n                    token = \"Record (ID:\"+data['entities'][0][\"properties\"][\"Id\"]+\") NOT-UPDATED\"\r\n            else:\r\n                token = \"Record (ID:\"+oldRecord[\"smax_id\"]+\") HASH the same, no update needed\"\r\n        else:\r\n            response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=data, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n            message = response.text\r\n            if response.status_code == 200:\r\n                token = \"Record Created!\"\r\n            else:\r\n                token = \"Issue Creating Record!\"\r\n                \r\n\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_response\": token }\r\n\r\ndef generateJson(title, concont, service, description, cid, operation=\"CREATE\"):\r\n    data2 ={}\r\n    data2['entities'] = [1]\r\n    data2['entities'][0] = {}\r\n    data2['entities'][0][\"entity_type\"] = \"Article\"\r\n    data2['entities'][0][\"properties\"] = {}\r\n    data2['entities'][0][\"properties\"][\"Title\"] = title\r\n    data2['entities'][0][\"properties\"][\"Content\"] = concont\r\n    data2['entities'][0][\"properties\"][\"Service\"] = service\r\n    data2['entities'][0][\"properties\"][\"Description\"] = description\r\n    data2['entities'][0][\"properties\"][\"PhaseId\"] = \"External\"\r\n    data2['entities'][0][\"properties\"][\"ConfluenceArticleID_c\"] = cid\r\n    data2['entities'][0][\"properties\"][\"ConfluenceArticleHash_c\"] = createHash(concont)[\"hash_object\"]\r\n    data2['entities'][0][\"properties\"][\"Subtype\"] = \"Article\"\r\n    data2['entities'][0][\"related_properties\"] = {}\r\n    data2['operation'] = operation\r\n    return data2\r\n\r\ndef getAuthCookie(auth_baseurl, user, password):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    try:\r\n        import requests\r\n        basicAuthCredentials = (user, password)\r\n        data={}\r\n        data['Login'] = user\r\n        data['Password']= password\r\n\r\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\r\n        token = response.text\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_auth\": token }\r\n\r\ndef createHash(inputString):\r\n    message = \"\"\r\n    result = \"\"\r\n    hash_object = \"\"\r\n    try:\r\n        import hashlib\r\n        # Assumes the default UTF-8\r\n        hash_object = hashlib.md5(inputString.encode()).hexdigest()\r\n        result = \"True\"\r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"hash_object\":hash_object}\r\n\r\ndef FindArticleForConfluenceID(auth_baseurl, user, password, tenantId, smax_baseurl, cID):\r\n    message = \"\"\r\n    result = \"\"\r\n    token = \"\"\r\n    smax_id = \"\"\r\n    conf_hash = \"\"\r\n    try:\r\n        import requests\r\n        import json\r\n        basicAuthCredentials = (user, password)\r\n\r\n        authResp = getAuthCookie(auth_baseurl, user, password)\r\n        if authResp[\"result\"] == \"True\":\r\n            token = authResp[\"smax_auth\"]\r\n        \r\n        authHeaders = { \"TENANTID\": \"keep-alive\"}\r\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\r\n        turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/Article?layout=Id,ConfluenceArticleID_c,ConfluenceArticleHash_c&filter=ConfluenceArticleID_c%3D'\"+cID+\"'\"\r\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\r\n        \r\n        result = \"False\"\r\n        if response3.status_code == 200:\r\n            jdata = json.loads(response3.text)\r\n            smax_id = jdata['entities'][0][\"properties\"][\"Id\"]\r\n            conf_hash = jdata['entities'][0][\"properties\"][\"ConfluenceArticleHash_c\"]\r\n            result = \"True\"\r\n        \r\n    except Exception as e:\r\n        message = e\r\n        result = \"False\"\r\n    return {\"result\": result, \"message\": message, \"smax_id\":smax_id, \"conf_hash\":conf_hash}"
  outputs:
    - jresult
    - result
    - message
  results:
    - SUCCESS: "${result=='True'}"
    - FAILURE
