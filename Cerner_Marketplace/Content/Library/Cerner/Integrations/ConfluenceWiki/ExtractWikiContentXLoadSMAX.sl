namespace: Cerner.Integrations.ConfluenceWiki
operation:
  name: ExtractWikiContentXLoadSMAX
  inputs:
    - conf_tag: "${get_sp('MarketPlace.confluenceTag')}"
    - conf_baseurl: "${get_sp('MarketPlace.confluenceURL')}"
    - conf_user: "${get_sp('MarketPlace.confluenceUser')}"
    - conf_password: "${get_sp('MarketPlace.confluencePassword')}"
    - smax_auth_baseurl: "${get_sp('MarketPlace.smaxAuthURL')}"
    - smax_user: "${get_sp('MarketPlace.smaxIntgUser')}"
    - smax_password: "${get_sp('MarketPlace.smaxIntgUserPass')}"
    - smax_tenantId: "${get_sp('MarketPlace.tenantID')}"
    - smax_baseurl: "${get_sp('MarketPlace.smaxURL')}"
    - smax_service: '12904'
  python_action:
    use_jython: false
    script: "###############################################################\n#   OO operation for synchronizing Confluence and Smax\n#   Author: Pawel Bak Microfocus (pawel.bak@microsoft.com)\n#   Inputs:\n#       - conf_tag\n#       - conf_baseurl\n#       - conf_user\n#       - conf_password\n#       - smax_auth_baseurl\n#       - smax_user\n#       - smax_password\n#       - smax_tenantId\n#       - smax_baseurl\n#       - smax_service\n#   Outputs:\n#       - result\n#       - message\n#       - jresult\n###############################################################\nfrom hashlib import new\nimport sys, os\nimport subprocess\n\n# function do download external modules to python \"on-the-fly\" \ndef install(param): \n    message = \"\"\n    result = \"\"\n    try:\n        \n        pathname = os.path.dirname(sys.argv[0])\n        message = os.path.abspath(pathname)\n        message = subprocess.call([sys.executable, \"-m\", \"pip\", \"list\"])\n        message = subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", param], capture_output=True)\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message }\n\n# requirement external modules\ninstall(\"requests\")\ninstall(\"lxml\")\n\n#main function\ndef execute(conf_tag, conf_baseurl, conf_user, conf_password, smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl):\n    message = \"\"\n    result = \"\"\n    jresult = \"\"\n    oldIds = \"\"\n    try:\n        \n        \n        import requests\n        import json\n        \n        basicAuthCredentials = (conf_user, conf_password)\n        confRes = BuildConfig(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\n        if confRes[\"result\"] == \"True\":\n            smax_service = confRes[\"smax_ids_conf\"]\n            # get IDs of confluence article with specific label (conf_tag)\n            giRes = getIds(conf_tag, conf_baseurl, conf_user, conf_password)\n            \n            foldRes = FindOldArticlesForSourceSystem(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\n\n            if foldRes[\"result\"] == \"True\":\n                oldIds = foldRes[\"smax_ids\"]\n\n\n            #check if getting ids from confluence was successfull\n            if giRes[\"result\"] == \"True\":\n                result = \"True\"\n                \n                mtagIds = None\n\n                if smax_service.index(\",\") > 0:\n                    gidft = getIdsForTags(smax_service, conf_baseurl, conf_user, conf_password) \n                    if gidft[\"result\"] == \"True\":\n                        mtagIds = json.loads(gidft[\"ids\"])\n\n                ids = giRes[\"ids\"].split(\"♪\")\n                tresult = json.loads('{}')\n                \n                i=0\n                #loop over ids\n                for idv in ids:\n                    #print(\"Processing: \" + idv)\n                    if len(idv) > 0:\n                        #get content from confluence for given ID\n                        content =  getBodyForId(idv, conf_baseurl, conf_user, conf_password, \"True\")\n                        jresult += idv + \":\"\n                        if content[\"result\"] == \"True\":\n                            cbody = content[\"body\"]\n                            #convert Confluence HTML to standard HTML\n                            bodyres = getHTML(cbody, content[\"link\"])\n                            \n                            if bodyres[\"result\"] == \"True\":\n                                cbody = bodyres[\"outHTML\"]\n                            \n                            smax_service_id = smax_service\n                            if mtagIds != None:\n                                ftfiRes = findTagsForId(json.dumps(mtagIds),idv, smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl)\n                                if ftfiRes[\"result\"] == \"True\":\n                                    smax_service_id = ftfiRes[\"firstSmaxService\"]\n                                else:\n                                    smax_service_id=\"\"\n                            if smax_service_id !=\"\":    \n                                #insert of update Articel Into SMAX\n                                response = insertUpdateArticle(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, content[\"title\"], cbody, smax_service_id, \"Content From Confluence\", idv)\n                                \n                                #check status and update result\n                                if response[\"result\"] == \"True\":\n                                    oldIds = removeIdFromList(oldIds, response[\"oldid\"])\n                                    jresult += \"TRUE;\"\n                                else:\n                                    jresult += \"FALSE_3;\"\n                            else:\n                                jresult += \"FALSE_2;\"\n                        else:\n                            jresult += \"FALSE_1;\"\n                    #print(\"Processing DONE\")\n                if len(oldIds) > 0:\n                                        \n                    RemoveOldContent(smax_auth_baseurl, smax_user, smax_password, smax_tenantId, smax_baseurl, oldIds, conf_tag, conf_baseurl, conf_user, conf_password)        \n            else:\n                result = \"False\"\n        else:\n            result = \"False\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"jresult\": str(jresult) }\n\n#get IDS for specific label from Confuence\ndef getIds(tag, baseurl, user, password):\n    message = \"\"\n    result = \"\"\n    ids = \"\"\n    \n    if tag == \"*\":  \n        return {\"result\": \"True\", \"message\": \"\", \"ids\": \"\" }\n\n    try:\n        import requests\n        import json\n        import time\n\n        basicAuthCredentials = (user, password)\n        doloop = True\n        start = 0\n        total = 0\n        page = 25\n        pages = \"\"\n        \n        while doloop:\n            turl = '{0}/rest/api/search/?expand=metadata.labels&cql=label={1}&limit={2}&start={3}'.format(baseurl, tag,page,start)\n            \n            response = requests.get(turl, requests.get, auth=basicAuthCredentials)\n            jr = json.loads(response.content)\n            \n            message = jr\n            results = jr[\"results\"]\n            totalSize = jr[\"totalSize\"]\n            message = results\n            \n            try:\n                for content in results:\n                    if content[\"content\"][\"type\"] == \"page\":\n                        pages += content[\"content\"][\"id\"] + \"♪\"\n            except Exception as e:\n                ids = \"\"\n            total = start + page\n            start += page\n            doloop = totalSize >= total\n            time.sleep(5)\n        \n        ids = pages\n        if len(ids) > 0:\n            ids = ids[:-1]\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"ids\": ids }\n\ndef getIdsForTags(tags_list, baseurl, user, password):\n    message = \"\"\n    result = \"\"\n    ids = \"\"\n    \n    try:\n        import json\n        serv_tag = tags_list.split(\",\")\n        rids = [0]*len(serv_tag)\n        i=0\n        for st in serv_tag:\n            sti = st.split(\":\")\n            if sti[0] != \"*\":\n                gidr = getIds(sti[0], baseurl, user, password)\n                if gidr[\"result\"] == \"True\":\n                    rids[i] = {\"tag\": sti[0], \"smax_id\": sti[1], \"ids\": gidr[\"ids\"]}\n                else:\n                    rids[i] = {\"tag\": sti[0], \"smax_id\": sti[1], \"ids\": \"\"}\n            else:\n                rids[i] = {\"tag\": sti[0], \"smax_id\": sti[1], \"ids\": \"\"}\n            i+=1\n\n        ids = json.dumps(rids)\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"ids\": ids }\n\ndef findTagsForId(tag_ids, id, auth_baseurl, user, password, tenantId, smax_baseurl):\n    message = \"\"\n    result = \"\"\n    firstTag = \"\"\n    firstSmaxService = \"\"\n    try:\n        import json\n        jtags = json.loads(tag_ids)\n        \n        \n        for tag in jtags:\n            if tag[\"tag\"] == \"*\":   \n                firstTag = tag[\"tag\"]\n                firstSmaxService = tag[\"smax_id\"]\n                break\n        \n        for tag in jtags:\n            ids = tag[\"ids\"].split(\"♪\")\n            found = False\n            for idv in ids:\n                if idv == id:\n                    found = True\n            if found:\n                firstTag = tag[\"tag\"]\n                firstSmaxService = tag[\"smax_id\"] \n                break\n        \n        if firstSmaxService.isnumeric() != True:\n            res = FindServiceByName(auth_baseurl, user, password, tenantId, smax_baseurl, firstSmaxService)\n            if res[\"result\"] == \"True\":\n                firstSmaxService = res[\"smax_id\"]\n            else:\n                firstSmaxService = \"\"\n                result = \"False\"\n\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"firstTag\": firstTag, \"firstSmaxService\": firstSmaxService }\n\n\n#Get content for specific ID in confluence\ndef getBodyForId(contentID, baseurl, user, password, replaceRelative):\n    message = \"\"\n    result = \"\"\n    body = \"\"\n    title = \"\"\n    status = \"\"\n    content_type = \"\"\n    link = \"\"\n    try:\n        import requests\n        import json\n        \n        basicAuthCredentials = (user, password)\n \n        response = requests.get(baseurl + '/rest/api/content/'+contentID+'?expand=body.view', auth=basicAuthCredentials)\n        jr = json.loads(response.content)\n        \n        message = jr\n        status = jr[\"status\"]\n        link = jr[\"_links\"][\"base\"] + jr[\"_links\"][\"webui\"] \n        content_type = jr[\"type\"]\n        \n        try:\n            title = jr[\"title\"]\n        except Exception as e:\n            title = \"NO_TITLE\"\n        \n        try:\n            body = jr[\"body\"][\"view\"][\"value\"]\n            if replaceRelative == \"True\":\n                body = body.replace(\"\\\"/\", \"\\\"\"+baseurl+\"/\")\n        except Exception as e:\n            body = \"NO_BODY\"\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"body\": body, \"title\": title, \"status\": status, \"content_type\": content_type, \"link\":link }\n\ndef hasTag(auth_baseurl, user, password, tenantId, smax_baseurl, smax_Id, conf_tag, conf_baseurl, conf_user, conf_password):\n    message = \"\"\n    result = \"\"\n\n    try:\n        import requests\n        import json\n        result = \"False\"\n        smaxr =  FindArticleForId(auth_baseurl, user, password, tenantId, smax_baseurl, smax_Id)\n        if smaxr[\"result\"] == \"True\":\n            confTagr = getTagsForId(smaxr[\"conf_id\"], conf_baseurl, conf_user, conf_password)\n            if confTagr[\"result\"] == \"True\":\n                tags = confTagr[\"tags\"].split(\"♪\")\n                for tag in tags:\n                    if tag == conf_tag:\n                        result = \"True\"\n                        break\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message}\n\n#Get content for specific ID in confluence\ndef getTagsForId(contentID, baseurl, user, password):\n    message = \"\"\n    result = \"\"\n    tags = \"\"\n\n    try:\n        import requests\n        import json\n        \n        basicAuthCredentials = (user, password)\n \n        response = requests.get(baseurl + '/rest/api/content/'+contentID+'/label', auth=basicAuthCredentials)\n        jr = json.loads(response.content)\n        \n        for tag in jr[\"results\"]:\n            tags += tag[\"name\"] + \"♪\"\n\n        if len(tags) > 0:\n            tags = tags[:-1]\n\n        message = jr\n        \n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"tags\": tags }\n\n\n\n# insert or update Knowladge Article in SMAX\ndef insertUpdateArticle(auth_baseurl, user, password, tenantId, smax_baseurl, title, concont, service, description, cid):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    oldid = \"\"\n    try:\n        import requests\n        import json\n        \n        basicAuthCredentials = (user, password)\n        authResp = getAuthCookie(auth_baseurl, user, password)\n        if authResp[\"result\"] == \"True\":\n            token = authResp[\"smax_auth\"]\n        \n        authHeaders = { \"TENANTID\": \"keep-alive\"}\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\n\n        oldRecord = FindArticleForConfluenceID(auth_baseurl, user, password, tenantId, smax_baseurl, cid)\n\n        data = generateJson(title, concont, service, description, cid)                 \n        \n        token = \"\"\n        \n        if oldRecord[\"result\"] == \"True\":\n            oldid = oldRecord[\"smax_id\"]\n            if data['entities'][0][\"properties\"][\"ConfluenceArticleHash_c\"] != oldRecord[\"conf_hash\"]:\n                data['entities'][0][\"properties\"][\"Id\"] = oldRecord[\"smax_id\"]\n                data['operation'] = \"UPDATE\"\n                response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=data, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n                message = response.text\n                if response.status_code == 200:\n                    token = \"Record (ID:\"+data['entities'][0][\"properties\"][\"Id\"]+\") UPDATED\"\n                else:\n                    token = \"Record (ID:\"+data['entities'][0][\"properties\"][\"Id\"]+\") NOT-UPDATED\"\n            else:\n                token = \"Record (ID:\"+oldRecord[\"smax_id\"]+\") HASH the same, no update needed\"\n        else:\n            response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=data, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n            message = response.text\n            if response.status_code == 200:\n                token = \"Record Created!\"\n            else:\n                token = \"Issue Creating Record!\"\n                \n\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smax_response\": token, \"oldid\":oldid }\n\n#generate data structure for SMAX\ndef generateJson(title, concont, service, description, cid, operation=\"CREATE\"):\n    data2 ={}\n    data2['entities'] = [1]\n    data2['entities'][0] = {}\n    data2['entities'][0][\"entity_type\"] = \"Article\"\n    data2['entities'][0][\"properties\"] = {}\n    data2['entities'][0][\"properties\"][\"Title\"] = title\n    data2['entities'][0][\"properties\"][\"Content\"] = concont\n    data2['entities'][0][\"properties\"][\"Service\"] = service\n    data2['entities'][0][\"properties\"][\"Description\"] = description\n    data2['entities'][0][\"properties\"][\"ConfluenceArticleID_c\"] = cid\n    data2['entities'][0][\"properties\"][\"ConfluenceArticleHash_c\"] = createHash(concont)[\"hash_object\"]\n    data2['entities'][0][\"properties\"][\"Subtype\"] = \"Article\"\n    data2['entities'][0][\"properties\"][\"SourceSystem_c\"] = \"CernerWiki\"\n    data2['entities'][0][\"properties\"][\"PhaseId\"] = \"External\"\n    data2['entities'][0][\"related_properties\"] = {}\n    data2['operation'] = operation\n    return data2\n\n#authenticate in SMAX\ndef getAuthCookie(auth_baseurl, user, password):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    try:\n        import requests\n        basicAuthCredentials = (user, password)\n        data={}\n        data['Login'] = user\n        data['Password']= password\n\n        response = requests.post(auth_baseurl, json=data, auth=basicAuthCredentials)\n        token = response.text\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smax_auth\": token }\n\n#Content hash function\ndef createHash(inputString):\n    message = \"\"\n    result = \"\"\n    hash_object = \"\"\n    try:\n        import hashlib\n        # Assumes the default UTF-8\n        hash_object = hashlib.md5(inputString.encode()).hexdigest()\n        result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"hash_object\":hash_object}\n\n#search function for Confluence\ndef FindArticleForConfluenceID(auth_baseurl, user, password, tenantId, smax_baseurl, cID):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    smax_id = \"\"\n    conf_hash = \"\"\n    try:\n        import requests\n        import json\n        basicAuthCredentials = (user, password)\n\n        authResp = getAuthCookie(auth_baseurl, user, password)\n        if authResp[\"result\"] == \"True\":\n            token = authResp[\"smax_auth\"]\n        \n        authHeaders = { \"TENANTID\": \"keep-alive\"}\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\n        turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/Article?layout=Id,ConfluenceArticleID_c,ConfluenceArticleHash_c,PhaseId&filter=ConfluenceArticleID_c%3D'\"+cID+\"'\"\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n        \n        result = \"False\"\n        if response3.status_code == 200:\n            jdata = json.loads(response3.text)\n            smax_id = jdata['entities'][0][\"properties\"][\"Id\"]\n            conf_hash = jdata['entities'][0][\"properties\"][\"ConfluenceArticleHash_c\"]\n            result = \"True\"\n        \n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smax_id\":smax_id, \"conf_hash\":conf_hash}\n\n\n#search function for Confluence\ndef FindArticleForId(auth_baseurl, user, password, tenantId, smax_baseurl, Id):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    smax_id = \"\"\n    conf_id = \"\"\n    try:\n        import requests\n        import json\n        basicAuthCredentials = (user, password)\n\n        authResp = getAuthCookie(auth_baseurl, user, password)\n        if authResp[\"result\"] == \"True\":\n            token = authResp[\"smax_auth\"]\n        \n        authHeaders = { \"TENANTID\": \"keep-alive\"}\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\n        turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/Article?layout=Id,ConfluenceArticleID_c,ConfluenceArticleHash_c,PhaseId&filter=Id%3D'\"+Id+\"'\"\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n        \n        result = \"False\"\n        if response3.status_code == 200:\n            jdata = json.loads(response3.text)\n            smax_id = jdata['entities'][0][\"properties\"][\"Id\"]\n            conf_id = jdata['entities'][0][\"properties\"][\"ConfluenceArticleID_c\"]\n            result = \"True\"\n        \n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smax_id\":smax_id, \"conf_id\":conf_id}\n\n\n#search function for Service\ndef FindServiceByName(auth_baseurl, user, password, tenantId, smax_baseurl, ServiceName):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    smax_id = \"\"\n\n    try:\n        import requests\n        import json\n        basicAuthCredentials = (user, password)\n\n        authResp = getAuthCookie(auth_baseurl, user, password)\n        if authResp[\"result\"] == \"True\":\n            token = authResp[\"smax_auth\"]\n        \n        authHeaders = { \"TENANTID\": \"keep-alive\"}\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\n        turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/ServiceDefinition?layout=Id,DisplayLabel,Category,MarketPlaceWikiTag_c&filter=DisplayLabel%3D'\"+ServiceName+\"'\"\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n        \n        result = \"False\"\n        if response3.status_code == 200:\n            jdata = json.loads(response3.text)\n            smax_id = jdata['entities'][0][\"properties\"][\"Id\"]\n            result = \"True\"\n        \n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smax_id\":smax_id}\n\n#search function for Service\ndef BuildConfig(auth_baseurl, user, password, tenantId, smax_baseurl):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    smax_ids_conf = \"\"\n\n    try:\n        import requests\n        import json\n        basicAuthCredentials = (user, password)\n\n        authResp = getAuthCookie(auth_baseurl, user, password)\n        if authResp[\"result\"] == \"True\":\n            token = authResp[\"smax_auth\"]\n        \n        authHeaders = { \"TENANTID\": \"keep-alive\"}\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\n        turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/ServiceDefinition?layout=Id,DisplayLabel,Category,MarketPlaceWikiTag_c&filter=MarketPlaceWikiTag_c%21%3D''\"\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n        \n        result = \"False\"\n        if response3.status_code == 200:\n            jdata = json.loads(response3.text)\n            for ent in jdata['entities']:\n                try:\n                    smax_ids_conf += ent[\"properties\"][\"MarketPlaceWikiTag_c\"]+ \":\" +ent[\"properties\"][\"Id\"]+\",\"\n                except:\n                    smax_ids_conf += \"\"\n            \n            result = \"True\"\n        \n        if len(smax_ids_conf)>0:\n            smax_ids_conf = smax_ids_conf[:-1]\n        else:\n            result = \"False\"\n            message = \"Config Not Found\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smax_ids_conf\":smax_ids_conf}\n\n#HTML convertion for Confluence HTML content\ndef getHTML(inHTML, link):\n    message = \"\"\n    result = \"\"\n    outHTML = \"\"\n    \n    try:\n\n        from lxml import html, etree\n        #print(\"     Processing: \" + link)\n        link_template = \"<div><span>Original page can be found at: </span><a href=\\\"\"+link+\"\\\">\" + link + \"</a><div><br/>\"\n        xslt_text = \"<xsl:stylesheet version=\\\"1.0\\\"\\r\\n xmlns:xsl=\\\"http://www.w3.org/1999/XSL/Transform\\\"\\r\\n xmlns:xhtml=\\\"http://www.w3.org/1999/xhtml\\\">\\r\\n <xsl:output omit-xml-declaration=\\\"yes\\\" indent=\\\"yes\\\"/>\\r\\n <xsl:strip-space elements=\\\"*\\\"/>\\r\\n\\r\\n <xsl:template match=\\\"p|div|br|a|h1|h2|h3|li|ul|ol|u|strong|table|td|tr|img|span|@*\\\">\\r\\n     <xsl:copy>\\r\\n       <xsl:apply-templates select=\\\"node()|@*\\\"/>\\r\\n     </xsl:copy>\\r\\n </xsl:template>\\r\\n\\r\\n <xsl:template match=\\\"code\\\"/>\\r\\n</xsl:stylesheet>\"\n\n        xslt_doc = etree.fromstring(xslt_text)\n        inHTML = inHTML.replace(\"\\n\",\"\").replace(\"\\t\",\"\")\n        transform = etree.XSLT(xslt_doc)\n        ehtml = html.fromstring(inHTML)\n        docs = etree.tostring(ehtml)\n        result = transform(ehtml)\n\n        docs = etree.tostring(result)\n\n        outHTML = link_template + str(bytes.decode(docs).replace(\"\\&quot;\",\"\").replace(\"\\\\n\",\"\").replace(\"&#194;&#160;\", \"&nbsp;\").replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\")) + \" \"\n        \n        #print(\"     Processing +DONE+\\n\")\n        result = \"True\"\n    except Exception as e:\n        message = e\n        print(message)\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"outHTML\": outHTML }\n    #return inHTML\n\n#search function for Confluence\ndef FindOldArticlesForSourceSystem(auth_baseurl, user, password, tenantId, smax_baseurl, SourceSystem=\"CernerWiki\"):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    smax_ids = \"\"\n    try:\n        import requests\n        import json\n        basicAuthCredentials = (user, password)\n\n        authResp = getAuthCookie(auth_baseurl, user, password)\n        if authResp[\"result\"] == \"True\":\n            token = authResp[\"smax_auth\"]\n        \n        authHeaders = { \"TENANTID\": \"keep-alive\"}\n        cookies = {\"SMAX_AUTH_TOKEN\":token}\n        turl = smax_baseurl +\"/rest/\"+tenantId+\"/ems/Article?layout=Id,SourceSystem_c,Title,PhaseId&filter=SourceSystem_c%3D'\"+SourceSystem+\"'\"\n        response3 = requests.get(turl, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n        \n        result = \"False\"\n        if response3.status_code == 200:\n            jdata = json.loads(response3.text)\n            \n            for entity in jdata['entities']:\n            \n                smax_ids += entity[\"properties\"][\"Id\"] + \"♪\"\n            \n            if len(smax_ids) > 0:\n                smax_ids = smax_ids[:-1]\n            result = \"True\"\n        \n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"smax_ids\":smax_ids }\n\ndef RemoveOldContent(auth_baseurl, user, password, tenantId, smax_baseurl, ids, conf_tag, conf_baseurl, conf_user, conf_password):\n    message = \"\"\n    result = \"\"\n    token = \"\"\n    smax_ids = \"\"\n    try:\n        import requests\n        import json\n\n        if len(ids) > 0:\n            \n            basicAuthCredentials = (user, password)\n            authResp = getAuthCookie(auth_baseurl, user, password)\n            if authResp[\"result\"] == \"True\":\n                token = authResp[\"smax_auth\"]\n        \n            authHeaders = { \"TENANTID\": \"keep-alive\"}\n            cookies = {\"SMAX_AUTH_TOKEN\":token}\n\n            oldIDs = ids.split(\"♪\")\n            for oid in ids.split(\"♪\"):\n                if hasTag(auth_baseurl, user, password, tenantId, smax_baseurl, id, conf_tag, conf_baseurl, conf_user, conf_password)[\"result\"] == \"True\":\n                    oldIDs = removeIdFromList(oldIDs,oid)\n\n            if len(oldIDs) > 0:\n                i=0\n                smaxData={}\n                smaxData[\"entities\"] = [0]*len(oldIDs)\n                smaxData[\"operation\"] = \"DELETE\"\n\n                for id in oldIDs:\n                    smaxData[\"entities\"][i]={}\n                    smaxData[\"entities\"][i][\"entity_type\"] = \"Article\"\n                    smaxData[\"entities\"][i][\"properties\"] = {}\n                    smaxData[\"entities\"][i][\"properties\"][\"Id\"] = id\n                    i+=1\n\n\n                response = requests.post(smax_baseurl+\"/rest/\"+tenantId+\"/ems/bulk\", json=smaxData, auth=basicAuthCredentials, headers=authHeaders, cookies=cookies)\n            \n                if response.status_code == 200:\n                    result = \"True\"\n                    message = \"OK\"\n                else:\n                    result = \"False\"\n                    message = response.text\n            else:\n                message = \"Nothing To Remove\"\n                result = \"True\"\n        else:\n            message = \"Nothing To Remove\"\n            result = \"True\"\n    except Exception as e:\n        message = e\n        result = \"False\"\n    return {\"result\": result, \"message\": message }\n\ndef removeIdFromList(list, id):\n    newlist = \"\"\n    if len(id) == 0:\n        return list\n    if len(list) > 0:\n        elems = list.split(\"♪\")\n        for elem in elems:\n            if elem != id:\n                newlist += elem + \"♪\"\n        if len(newlist) > 0:\n            newlist = newlist[:-1]\n        return newlist\n    else:\n        return \"\""
  outputs:
    - jresult
    - result
    - message
  results:
    - SUCCESS: "${result=='True'}"
    - FAILURE
